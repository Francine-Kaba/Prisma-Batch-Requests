# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# user types

class userOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the user create method"""
    id: _int


class userCreateInput(userOptionalCreateInput):
    """Required arguments to the user create method"""
    name: _str
    email: _str
    password: _str
    created_at: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class userOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the user create method, without relations"""
    id: _int


class userCreateWithoutRelationsInput(userOptionalCreateWithoutRelationsInput):
    """Required arguments to the user create method, without relations"""
    name: _str
    email: _str
    password: _str
    created_at: datetime.datetime


class userCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'


class userCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['userCreateWithoutRelationsInput', List['userCreateWithoutRelationsInput']]
    connect: Union['userWhereUniqueInput', List['userWhereUniqueInput']]


_userWhereUnique_id_Input = TypedDict(
    '_userWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_userWhereUnique_email_Input = TypedDict(
    '_userWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

userWhereUniqueInput = Union[
    '_userWhereUnique_id_Input',
    '_userWhereUnique_email_Input',
]


class userUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    password: _str
    created_at: datetime.datetime


class userUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    password: _str
    created_at: datetime.datetime


class userUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['userCreateWithoutRelationsInput']
    connect: List['userWhereUniqueInput']
    set: List['userWhereUniqueInput']
    disconnect: List['userWhereUniqueInput']
    delete: List['userWhereUniqueInput']

    # TODO
    # update: List['userUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['userUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['userScalarWhereInput']
    # upsert: List['userUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['userCreateOrConnectWithoutRelationsInput']


class userUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'userUpdateInput'
    # upsert: 'userUpsertWithoutRelationsInput'
    # connectOrCreate: 'userCreateOrConnectWithoutRelationsInput'


class userUpsertInput(TypedDict):
    create: 'userCreateInput'
    update: 'userUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_user_id_OrderByInput = TypedDict(
    '_user_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_user_name_OrderByInput = TypedDict(
    '_user_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_user_email_OrderByInput = TypedDict(
    '_user_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_user_password_OrderByInput = TypedDict(
    '_user_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_user_created_at_OrderByInput = TypedDict(
    '_user_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

userOrderByInput = Union[
    '_user_id_OrderByInput',
    '_user_name_OrderByInput',
    '_user_email_OrderByInput',
    '_user_password_OrderByInput',
    '_user_created_at_OrderByInput',
]



# recursive user types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

userRelationFilter = TypedDict(
    'userRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class userListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class userInclude(TypedDict, total=False):
    """user relational arguments"""


    

class userIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class userArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyuserArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    
    

class audit_logIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""


class audit_logIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""


class audit_logIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""


class audit_logIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""


class audit_logIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class audit_logArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'audit_logIncludeFromaudit_logRecursive1'


class audit_logArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'audit_logIncludeFromaudit_logRecursive2'


class audit_logArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'audit_logIncludeFromaudit_logRecursive3'


class audit_logArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'audit_logIncludeFromaudit_logRecursive4'


class audit_logArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyaudit_logArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive1'


class FindManyaudit_logArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive2'


class FindManyaudit_logArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive3'


class FindManyaudit_logArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive4'


class FindManyaudit_logArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    


FindManyuserArgs = FindManyuserArgsFromuser
FindFirstuserArgs = FindManyuserArgsFromuser


    

class userWhereInput(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive1', List['userWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive1']
    OR: List['userWhereInputRecursive1']
    NOT: List['userWhereInputRecursive1']


class userWhereInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive2', List['userWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive2']
    OR: List['userWhereInputRecursive2']
    NOT: List['userWhereInputRecursive2']


class userWhereInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive3', List['userWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive3']
    OR: List['userWhereInputRecursive3']
    NOT: List['userWhereInputRecursive3']


class userWhereInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive4', List['userWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive4']
    OR: List['userWhereInputRecursive4']
    NOT: List['userWhereInputRecursive4']


class userWhereInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate user types


    

class userScalarWhereWithAggregatesInput(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive1']
    OR: List['userScalarWhereWithAggregatesInputRecursive1']
    NOT: List['userScalarWhereWithAggregatesInputRecursive1']


class userScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive2']
    OR: List['userScalarWhereWithAggregatesInputRecursive2']
    NOT: List['userScalarWhereWithAggregatesInputRecursive2']


class userScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive3']
    OR: List['userScalarWhereWithAggregatesInputRecursive3']
    NOT: List['userScalarWhereWithAggregatesInputRecursive3']


class userScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive4']
    OR: List['userScalarWhereWithAggregatesInputRecursive4']
    NOT: List['userScalarWhereWithAggregatesInputRecursive4']


class userScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class userGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    email: _str
    password: _str
    created_at: datetime.datetime
    _sum: 'userSumAggregateOutput'
    _avg: 'userAvgAggregateOutput'
    _min: 'userMinAggregateOutput'
    _max: 'userMaxAggregateOutput'
    _count: 'userCountAggregateOutput'


class userAvgAggregateOutput(TypedDict, total=False):
    """user output for aggregating averages"""
    id: float


class userSumAggregateOutput(TypedDict, total=False):
    """user output for aggregating sums"""
    id: _int


class userScalarAggregateOutput(TypedDict, total=False):
    """user output including scalar fields"""
    id: _int
    name: _str
    email: _str
    password: _str
    created_at: datetime.datetime


userMinAggregateOutput = userScalarAggregateOutput
userMaxAggregateOutput = userScalarAggregateOutput


class userMaxAggregateInput(TypedDict, total=False):
    """user input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    password: bool
    created_at: bool


class userMinAggregateInput(TypedDict, total=False):
    """user input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    password: bool
    created_at: bool


class userNumberAggregateInput(TypedDict, total=False):
    """user input for aggregating numbers"""
    id: bool


userAvgAggregateInput = userNumberAggregateInput
userSumAggregateInput = userNumberAggregateInput


userCountAggregateInput = TypedDict(
    'userCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'password': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

userCountAggregateOutput = TypedDict(
    'userCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'password': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


userKeys = Literal[
    'id',
    'name',
    'email',
    'password',
    'created_at',
]
userScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'password',
    'created_at',
]
userScalarFieldKeysT = TypeVar('userScalarFieldKeysT', bound=userScalarFieldKeys)

userRelationalFieldKeys = _NoneType

# audit_log types

class audit_logOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the audit_log create method"""
    id: _int
    timestamp: datetime.datetime
    details: Optional[_str]


class audit_logCreateInput(audit_logOptionalCreateInput):
    """Required arguments to the audit_log create method"""
    userId: _int
    action: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class audit_logOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the audit_log create method, without relations"""
    id: _int
    timestamp: datetime.datetime
    details: Optional[_str]


class audit_logCreateWithoutRelationsInput(audit_logOptionalCreateWithoutRelationsInput):
    """Required arguments to the audit_log create method, without relations"""
    userId: _int
    action: _str


class audit_logCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'audit_logCreateWithoutRelationsInput'
    connect: 'audit_logWhereUniqueInput'


class audit_logCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['audit_logCreateWithoutRelationsInput', List['audit_logCreateWithoutRelationsInput']]
    connect: Union['audit_logWhereUniqueInput', List['audit_logWhereUniqueInput']]


_audit_logWhereUnique_id_Input = TypedDict(
    '_audit_logWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

audit_logWhereUniqueInput = _audit_logWhereUnique_id_Input


class audit_logUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    timestamp: datetime.datetime
    userId: Union[AtomicIntInput, _int]
    action: _str
    details: Optional[_str]


class audit_logUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    timestamp: datetime.datetime
    userId: Union[AtomicIntInput, _int]
    action: _str
    details: Optional[_str]


class audit_logUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['audit_logCreateWithoutRelationsInput']
    connect: List['audit_logWhereUniqueInput']
    set: List['audit_logWhereUniqueInput']
    disconnect: List['audit_logWhereUniqueInput']
    delete: List['audit_logWhereUniqueInput']

    # TODO
    # update: List['audit_logUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['audit_logUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['audit_logScalarWhereInput']
    # upsert: List['audit_logUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['audit_logCreateOrConnectWithoutRelationsInput']


class audit_logUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'audit_logCreateWithoutRelationsInput'
    connect: 'audit_logWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'audit_logUpdateInput'
    # upsert: 'audit_logUpsertWithoutRelationsInput'
    # connectOrCreate: 'audit_logCreateOrConnectWithoutRelationsInput'


class audit_logUpsertInput(TypedDict):
    create: 'audit_logCreateInput'
    update: 'audit_logUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_audit_log_id_OrderByInput = TypedDict(
    '_audit_log_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_audit_log_timestamp_OrderByInput = TypedDict(
    '_audit_log_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_audit_log_userId_OrderByInput = TypedDict(
    '_audit_log_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_audit_log_action_OrderByInput = TypedDict(
    '_audit_log_action_OrderByInput',
    {
        'action': 'SortOrder',
    },
    total=True
)

_audit_log_details_OrderByInput = TypedDict(
    '_audit_log_details_OrderByInput',
    {
        'details': 'SortOrder',
    },
    total=True
)

audit_logOrderByInput = Union[
    '_audit_log_id_OrderByInput',
    '_audit_log_timestamp_OrderByInput',
    '_audit_log_userId_OrderByInput',
    '_audit_log_action_OrderByInput',
    '_audit_log_details_OrderByInput',
]



# recursive audit_log types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

audit_logRelationFilter = TypedDict(
    'audit_logRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class audit_logListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class audit_logInclude(TypedDict, total=False):
    """audit_log relational arguments"""


    

class userIncludeFromaudit_log(TypedDict, total=False):
    """Relational arguments for audit_log"""


class userIncludeFromaudit_logRecursive1(TypedDict, total=False):
    """Relational arguments for audit_log"""


class userIncludeFromaudit_logRecursive2(TypedDict, total=False):
    """Relational arguments for audit_log"""


class userIncludeFromaudit_logRecursive3(TypedDict, total=False):
    """Relational arguments for audit_log"""


class userIncludeFromaudit_logRecursive4(TypedDict, total=False):
    """Relational arguments for audit_log"""

    

class userArgsFromaudit_log(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromaudit_logRecursive1(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromaudit_logRecursive2(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromaudit_logRecursive3(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromaudit_logRecursive4(TypedDict, total=False):
    """Arguments for audit_log"""
    
    

class FindManyuserArgsFromaudit_log(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromaudit_logRecursive1(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromaudit_logRecursive2(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromaudit_logRecursive3(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromaudit_logRecursive4(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    
    

class audit_logIncludeFromaudit_log(TypedDict, total=False):
    """Relational arguments for audit_log"""


class audit_logIncludeFromaudit_logRecursive1(TypedDict, total=False):
    """Relational arguments for audit_log"""


class audit_logIncludeFromaudit_logRecursive2(TypedDict, total=False):
    """Relational arguments for audit_log"""


class audit_logIncludeFromaudit_logRecursive3(TypedDict, total=False):
    """Relational arguments for audit_log"""


class audit_logIncludeFromaudit_logRecursive4(TypedDict, total=False):
    """Relational arguments for audit_log"""

    

class audit_logArgsFromaudit_log(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'audit_logIncludeFromaudit_logRecursive1'


class audit_logArgsFromaudit_logRecursive1(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'audit_logIncludeFromaudit_logRecursive2'


class audit_logArgsFromaudit_logRecursive2(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'audit_logIncludeFromaudit_logRecursive3'


class audit_logArgsFromaudit_logRecursive3(TypedDict, total=False):
    """Arguments for audit_log"""
    include: 'audit_logIncludeFromaudit_logRecursive4'


class audit_logArgsFromaudit_logRecursive4(TypedDict, total=False):
    """Arguments for audit_log"""
    
    

class FindManyaudit_logArgsFromaudit_log(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive1'


class FindManyaudit_logArgsFromaudit_logRecursive1(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive2'


class FindManyaudit_logArgsFromaudit_logRecursive2(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive3'


class FindManyaudit_logArgsFromaudit_logRecursive3(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    include: 'audit_logIncludeFromaudit_logRecursive4'


class FindManyaudit_logArgsFromaudit_logRecursive4(TypedDict, total=False):
    """Arguments for audit_log"""
    take: int
    skip: int
    order_by: Union['audit_logOrderByInput', List['audit_logOrderByInput']]
    where: 'audit_logWhereInput'
    cursor: 'audit_logWhereUniqueInput'
    


FindManyaudit_logArgs = FindManyaudit_logArgsFromaudit_log
FindFirstaudit_logArgs = FindManyaudit_logArgsFromaudit_log


    

class audit_logWhereInput(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    action: Union[_str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['audit_logWhereInputRecursive1', List['audit_logWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['audit_logWhereInputRecursive1']
    OR: List['audit_logWhereInputRecursive1']
    NOT: List['audit_logWhereInputRecursive1']


class audit_logWhereInputRecursive1(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    action: Union[_str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['audit_logWhereInputRecursive2', List['audit_logWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['audit_logWhereInputRecursive2']
    OR: List['audit_logWhereInputRecursive2']
    NOT: List['audit_logWhereInputRecursive2']


class audit_logWhereInputRecursive2(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    action: Union[_str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['audit_logWhereInputRecursive3', List['audit_logWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['audit_logWhereInputRecursive3']
    OR: List['audit_logWhereInputRecursive3']
    NOT: List['audit_logWhereInputRecursive3']


class audit_logWhereInputRecursive3(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    action: Union[_str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['audit_logWhereInputRecursive4', List['audit_logWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['audit_logWhereInputRecursive4']
    OR: List['audit_logWhereInputRecursive4']
    NOT: List['audit_logWhereInputRecursive4']


class audit_logWhereInputRecursive4(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    action: Union[_str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']



# aggregate audit_log types


    

class audit_logScalarWhereWithAggregatesInput(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    action: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['audit_logScalarWhereWithAggregatesInputRecursive1']
    OR: List['audit_logScalarWhereWithAggregatesInputRecursive1']
    NOT: List['audit_logScalarWhereWithAggregatesInputRecursive1']


class audit_logScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    action: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['audit_logScalarWhereWithAggregatesInputRecursive2']
    OR: List['audit_logScalarWhereWithAggregatesInputRecursive2']
    NOT: List['audit_logScalarWhereWithAggregatesInputRecursive2']


class audit_logScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    action: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['audit_logScalarWhereWithAggregatesInputRecursive3']
    OR: List['audit_logScalarWhereWithAggregatesInputRecursive3']
    NOT: List['audit_logScalarWhereWithAggregatesInputRecursive3']


class audit_logScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    action: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['audit_logScalarWhereWithAggregatesInputRecursive4']
    OR: List['audit_logScalarWhereWithAggregatesInputRecursive4']
    NOT: List['audit_logScalarWhereWithAggregatesInputRecursive4']


class audit_logScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """audit_log arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    action: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']



class audit_logGroupByOutput(TypedDict, total=False):
    id: _int
    timestamp: datetime.datetime
    userId: _int
    action: _str
    details: _str
    _sum: 'audit_logSumAggregateOutput'
    _avg: 'audit_logAvgAggregateOutput'
    _min: 'audit_logMinAggregateOutput'
    _max: 'audit_logMaxAggregateOutput'
    _count: 'audit_logCountAggregateOutput'


class audit_logAvgAggregateOutput(TypedDict, total=False):
    """audit_log output for aggregating averages"""
    id: float
    userId: float


class audit_logSumAggregateOutput(TypedDict, total=False):
    """audit_log output for aggregating sums"""
    id: _int
    userId: _int


class audit_logScalarAggregateOutput(TypedDict, total=False):
    """audit_log output including scalar fields"""
    id: _int
    timestamp: datetime.datetime
    userId: _int
    action: _str
    details: _str


audit_logMinAggregateOutput = audit_logScalarAggregateOutput
audit_logMaxAggregateOutput = audit_logScalarAggregateOutput


class audit_logMaxAggregateInput(TypedDict, total=False):
    """audit_log input for aggregating by max"""
    id: bool
    timestamp: bool
    userId: bool
    action: bool
    details: bool


class audit_logMinAggregateInput(TypedDict, total=False):
    """audit_log input for aggregating by min"""
    id: bool
    timestamp: bool
    userId: bool
    action: bool
    details: bool


class audit_logNumberAggregateInput(TypedDict, total=False):
    """audit_log input for aggregating numbers"""
    id: bool
    userId: bool


audit_logAvgAggregateInput = audit_logNumberAggregateInput
audit_logSumAggregateInput = audit_logNumberAggregateInput


audit_logCountAggregateInput = TypedDict(
    'audit_logCountAggregateInput',
    {
        'id': bool,
        'timestamp': bool,
        'userId': bool,
        'action': bool,
        'details': bool,
        '_all': bool,
    },
    total=False,
)

audit_logCountAggregateOutput = TypedDict(
    'audit_logCountAggregateOutput',
    {
        'id': int,
        'timestamp': int,
        'userId': int,
        'action': int,
        'details': int,
        '_all': int,
    },
    total=False,
)


audit_logKeys = Literal[
    'id',
    'timestamp',
    'userId',
    'action',
    'details',
]
audit_logScalarFieldKeys = Literal[
    'id',
    'timestamp',
    'userId',
    'action',
    'details',
]
audit_logScalarFieldKeysT = TypeVar('audit_logScalarFieldKeysT', bound=audit_logScalarFieldKeys)

audit_logRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields